//==========================<hardcore mode>=========================//
private const bool HARDCORE_ACTIVATED = true;			    		// set to "true" to enable hardcore mode
private const float HC_GUNS_MULTIPLIER = (float) 4.0;		    	// damage multiplier for guns
private const float HC_MELEE_MULTIPLIER = (float) 2.0;		   		// damage multiplier for melee
private const float HC_FALL_MULTIPLIER = (float) 0.5;		    	// damage multiplier for fall
private const float HC_FIRE_MULTIPLIER = (float) 0.5;		    	// damage multiplier for fire
private const float HC_EXPL_MULTIPLIER = (float) 1.0;		    	// damage multiplier for explosions
private const bool HC_BLOCK_DAMAGE = false;			    			// set to "true" to make blocked attacks damage players
private const int HC_BLOCK_DAMAGE_AMOUNT = 3;		    			// damage in HP given by blocked attack
private const bool HC_BLEEDING = true;				    			// set te "true" to enable bleeding on getting some damage
private const bool HC_BLEEDING_ON_START = false;		    		// set te "true" to make people bleed in the very beginning
private const int HC_BLEEDING_CHANCE = 1;			    			// bleeding will start with chance "1/x" where x is this variable
private const int HC_BLEEDING_TRIGGER_HP = 20;	    				// damage in HP after that bleeding will start find a chance
private const bool HC_CANT_PUT_FIRE_OFF = false;		    		// set to "true" to disallow players to roll to stop burning
//private const bool HC_WEAPONS_BREAK = false;			    		// set to "true" to allow weapons to break [WIP]

// where players' data will be stored
private class PlayerData {
	public float StartHealth = 0f;
	public float LastHealth = 0f;
	public float LastDamage = 0f; 
	public float BleedDamage = 0f;
	public float HealthNeeded = 0f;
	public float HealthAdded = 0f;

	// dead player data
	// public float DeathTime = 0f;
	// public int RevivePoints = 0;
	public float DeathDamageTaken = 0f;
	public IObjectText Label = null;

	public IUser User = null;
	public IPlayer Body = null;
	public PlayerTeam Team = PlayerTeam.Independent;
	public bool WasSetOnFire = false;
	public bool IsBleeding = HC_BLEEDING_ON_START;
	public PlayerData(float startHealth, IUser user, IPlayer body, bool wasSetOnFire){
		this.StartHealth = startHealth;
		this.User = user;
		this.Body = body;
		this.WasSetOnFire = wasSetOnFire;
		this.Team = body.GetTeam();
	}

	public PlayerData(){}
}


// ============================ |
// ========< THE CODE >======== |
// ============================ V


public void OnStartup(){
Game.RunCommand("/msg Hardcore Script - Test Running")
// fast tick trigger
			IObjectTimerTrigger timerTriger = (IObjectTimerTrigger)Game.CreateObject("TimerTrigger"); 
			timerTriger.SetIntervalTime(100);
			timerTriger.SetRepeatCount(0);
			timerTriger.SetScriptMethod("TickFast");
			timerTriger.Trigger();
}
public void TickFast(TriggerArgs args){
	if (HARDCORE_ACTIVATED) Tick_Hardcore_Main();
}
private void Tick_Hardcore_Main(){
	for(int i = players.Count - 1; i >=0; i--){
		PlayerData data = players[i];
		if (data.Body.IsRemoved) {
			if (players[i].Label != null) players[i].Label.Remove();
			players.RemoveAt(i);
			CheckGameover();
		} else {
			IPlayerStatistics stats = data.Body.Statistics;
			float damage =
				stats.TotalFallDamageTaken * HC_FALL_MULTIPLIER +
				stats.TotalMeleeDamageTaken * HC_MELEE_MULTIPLIER +
				stats.TotalProjectileDamageTaken * HC_GUNS_MULTIPLIER +
				stats.TotalExplosionDamageTaken * HC_EXPL_MULTIPLIER +
				stats.TotalFireDamageTaken * HC_FIRE_MULTIPLIER +
				data.BleedDamage;
			if (HC_BLOCK_DAMAGE) damage +=  stats.TotalBlockedAttacks * (float)HC_BLOCK_DAMAGE_AMOUNT;
			float damage_causingBleed = stats.TotalMeleeDamageTaken * HC_MELEE_MULTIPLIER +
				stats.TotalProjectileDamageTaken * HC_GUNS_MULTIPLIER +
				stats.TotalExplosionDamageTaken * HC_EXPL_MULTIPLIER;

			if (data.StartHealth - damage > 0f){
				float healthNow = data.Body.GetHealth();
				if (healthNow > data.LastHealth /*&& data.HealthNeeded < healthNow - data.LastHealth*/){
					if (data.IsBleeding){
						data.IsBleeding = false;
						data.HealthNeeded += healthNow - data.LastHealth - 25f;
					} else data.HealthNeeded += healthNow - data.LastHealth + 10f;
				} else if (data.HealthNeeded > 0f){
					data.HealthAdded += 0.5f;
					data.HealthNeeded -= 0.5f;
				} else data.HealthNeeded = 0f;

				if (data.WasSetOnFire){
					data.Body.SetMaxFire();
				}

				if (data.IsBleeding){
					data.BleedDamage += 1f;
					if (rand.Next(6) == 0)
						Game.PlayEffect("TR_B", data.Body.GetWorldPosition() + new Vector2(8,0) + new Vector2(rand.Next(-2,2),rand.Next(-2,2)));
				}

				data.Body.SetHealth(data.StartHealth - damage + data.HealthAdded);
				if (HC_BLEEDING && damage_causingBleed - data.LastDamage > (float)HC_BLEEDING_TRIGGER_HP && rand.Next(HC_BLEEDING_CHANCE) == 0){ 
					data.IsBleeding = true;
					Game.PlayEffect("CFTXT", data.Body.GetWorldPosition() + new Vector2(0f, 30f), "BLEEDING!");
				} if (HC_CANT_PUT_FIRE_OFF && stats.TotalFireDamageTaken != 0) data.WasSetOnFire = true;
				data.LastHealth = data.Body.GetHealth();
				data.LastDamage = damage_causingBleed;
			} else data.Body.Kill();
		}
	}
}

private void CheckGameover(){
	//if (!INSTAGIB_ON){
	//	List <PlayerTeam> teams = new List<PlayerTeam>();
	//	String winner = "";

		//if (Game.GetActiveUsers().Length < 2) return;

		foreach (PlayerData data in players)
			if (!data.Body.IsRemoved && !teams.Contains(data.Team))
				if (REVIVE_KILL_FALLEN_TO_GAMEOVER || (!REVIVE_KILL_FALLEN_TO_GAMEOVER && !data.Body.IsDead))
					teams.Add(data.Team);

		switch (teams.Count){
			case 5:
				Game.ShowPopupMessage("Wut?");
				break;
			case 4:
			case 3:
			case 2:
				return;
			case 1:
				if (teams[0] != PlayerTeam.Independent){
					switch (teams[0]) {
						case PlayerTeam.Team1 : winner = "Blue team"; break;
						case PlayerTeam.Team2 : winner = "Red team"; break;
						case PlayerTeam.Team3 : winner = "Green team"; break;
						case PlayerTeam.Team4 : winner = "Yellow team"; break;
					}
				} else {
					int plysAlive = 0;
					int plysFallen = 0;
					foreach (PlayerData data in players){
						if (!data.Body.IsDead){
							plysAlive ++;
							if (winner == "") winner = data.Body.GetProfile().Name;
						} else plysFallen ++;
					}

					int plys = 0;
					if (REVIVE_KILL_FALLEN_TO_GAMEOVER) plys = plysAlive + plysFallen;
					else plys = plysAlive;

					if (plys > 1) return;
				}
				Game.SetGameOver(winner + " wins!");
				break;
			case 0:
				Game.SetGameOver("Draw!");
				break;
		}
	}
}

